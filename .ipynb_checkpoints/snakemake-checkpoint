rule make_txdb:
  input:
    REF_DIR="splicemutr_references"
    SPLICEMUTR_SCRIPTS="/splicemute/scripts"
    GTF_URL="https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_26/gencode.v26.chr_patch_hapl_scaff.annotation.gtf.gz"
    GTF_FILE="gencode.v26.chr_patch_hapl_scaff.annotation.gtf.gz"
  output:
    OUT_FILE="G026_txdb.sqlite"
  shell:
    "conda activate miniconda3/envs/splicemutr

    mkdir {input.REF_DIR}
    cd {input.REF_DIR}
    wget {input.GTF_URL}
    {input.SPLICEMUTR_SCRIPTS}/make_txdb.R -o {input.REF_DIR}/{output.OUT_FILE} -g {input.REF_DIR}/{input.GTF_FILE}

    conda deactivate"

rule prep_bsgenome_reference:
  input:
    FASTA_URL="https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_26/GRCh38.primary_assembly.genome.fa.gz"
    REF_DIR="splicemutr_references"
    FA_TO_TWOBIT_EXEC="faToTwoBit"
    FASTA_FILE="GRCh38.primary_assembly.genome.fa"
    FASTA_FILE_GZ="GRCh38.primary_assembly.genome.fa.gz"
  output:
    TWOBIT_FILE=GRCh38.primary_assembly.genome.2bit
  shell:
    "conda activate miniconda3/envs/splicemutr

    mkdir {input.REF_DIR}
    cd {input.REF_DIR}
    wget {input.FASTA_URL}
    gunzip {input.FASTA_FILE_GZ}

    {input.FA_TO_TWOBIT_EXEC} {input.REF_DIR}/{input.FASTA_FILE} {input.REF_DIR}/{output.TWOBIT_FILE}

    conda deactivate"

rule prepare_leafcutter_references (prep_references.sh):
  input:
    LEAF_DIR="leafcutter"
    GTF="splicemutr_references/"gencode.v26.chr_patch_hapl_scaff.annotation.gtf.gz"
  output:
    ANN_DIR="splicemutr_references/annotations"
  shell:
    "{input.LEAF_DIR}/scripts/gtf_to_exons.R $GTF {ouput.ANN_DIR}/G026.exons.txt.gz

    cd $ANN_DIR

    {input.LEAF_DIR}/leafviz/gtf2leafcutter.pl -o G026 {input.GTF}"

rule convert_STAR_sj.out.tab_to_leafcutter_.junc:
  input:
    SJ_FILES=BAMS/SJ_files.txt
    SCRIPT_DIR=splicemute/scripts
    FUNCTIONS=/splicemute/R/functions.R
    NUM_SJ_FILES=8
  output:
    OUT_DIR="junc_files"
  shell:
    "conda activate miniconda3/envs/splicemutr

    START=1
    for VAR in {$START..{input.NUM_SJ_FILES}}
    do
      STAR_JUNCFILE=$(sed -n ${VAR}p {input.SJ_FILES})
      {input.SCRIPT_DIR}/STAR_to_leaf.R -f {input.FUNCTIONS} -o {input.OUT_DIR} -s {input.STAR_JUNCFILE}
    done

    cd {output.OUT_DIR}
    ls $PWD/*.junc > filenames.txt

    conda deactivate"

rule running_leafcutter:
  input:
      JUNC_DIR=/junc_files
      LEAF_SCRIPTS=/leafcutter/scripts
      REF_DIR=references/leafcutter_annotations
      LEAFVIZ_DIR=/leafcutter/leafviz
      GROUPS_FILE=/groups_file.txt
  shell:
    conda activate miniconda3/envs/splicemutr

    echo "leafcutter_cluster_regtools"
    python2 {input.LEAF_SCRIPTS}/splicemutr_leafcutter_cluster_regtools.py -j {input.JUNC_DIR}/junc_file.txt -r {input.JUNC_DIR} -o data -l 500000

    echo "leafcutter_ds"
    {input.LEAF_SCRIPTS}/leafcutter_ds.R --num_threads 1 --exon_file={input.REF_DIR}/G026.exons.txt.gz -o {input.JUNC_DIR}/leafcutter_ds {input.JUNC_DIR}/data_perind_numers.counts.gz {input.GROUPS_FILE}

    echo "prepare_results"
    {input.LEAFVIZ_DIR}/prepare_results.R -o {input.JUNC_DIR}/data.Rdata -m {input.GROUPS_FILE} {input.JUNC_DIR}/data_perind_numers.counts.gz {input.JUNC_DIR}/leafcutter_ds_cluster_significance.txt {input.JUNC_DIR}/leafcutter_ds_effect_sizes.txt {input.REF_DIR}/G026

    conda deactivate"

rule save_introns:
  input:
    INTRON_FILE=/junc_files/data.Rdata
    SPLIT_NUM=5000
    SCRIPT_DIR=splicemute/scripts
  output:
    OUT_DIR=/introns
  shell:
    "conda activate miniconda3/envs/splicemutr

    {input.SCRIPT_DIR}=/users/tpalmer/splicemute/scripts

    {input.SCRIPT_DIR}/save_introns.R -i {input.INTRON_FILE} -o {output.OUT_DIR}

   conda deactivate"

rule form_transcripts:
  input:
    INTRON_FILE=introns.rds
    OUT=/formed_transcripts
    TXDB=/splicemutr_references/txdb_file.sqlite
    SCRIPT_DIR=/splicemute/scripts
    BSGENOME=BSgenome.Hsapiens.GENCODE.GRCh38.p10
  shell:
    "conda activate miniconda3/envs/splicemutr

    OUT_PREFIX={input.OUT}/$(echo $(basename {input.INTRON_FILE}) | sed s/'.rds'/''/g)

    {input.SCRIPT_DIR}/form_transcripts.R -o $OUT_PREFIX -t {input.TXDB} -j {input.INTRON_FILE} -b {input.BSGENOME}

    conda deactivate"

rule calcualte_coding_potential:
  input:
      SPLICE_FILE=/formed_transcripts/introns_data_splicemutr.rds
      FUNCS=/splicemute/R/functions.R
      SCRIPT_DIR=/splicemute/scripts
  output:
    OUT=/formed_transcripts
  shell:
    "conda activate miniconda3/envs/splicemutr

    TRANSCRIPT_FILE=$(echo {input.SPLICE_FILE} | sed s/'_data_splicemutr.rds'/'_sequences.fa'/g)


    {input.SCRIPT_DIR}/calc_coding_potential.R -o {output.OUT} -s {input.SPLICE_FILE} -t $TRANSCRIPT_FILE -f {input.FUNCS}

    cd {output.OUT}
    ls $PWD/*_cp_corrected.rds > filenames_cp.txt"

rule combine_splicemutr:
  input:
    SPLICE_FILES=/formed_transcripts/filenames_cp.txt
    SCRIPT_DIR=/splicemute/scripts
  output:
      OUT=/combine_splicemutr_out_cp
  shell:

    "conda activate miniconda3/envs/splicemutr

    mkdir {output.OUT}

    {input.SCRIPT_DIR}/combine_splicemutr.R -o {output.OUT} -s {input.SPLICE_FILES}

    conda deactivate"

rule process_peptides:
  input:
    SCRIPT_DIR=/splicemute/inst
    PEPTIDES=/combine_splicemutr_out_cp/proteins.txt
    OUT_DIR=/process_peptides_out
    KMER_LENGTH=9
  output:
    OUT_DIR=/process_peptides_out
  shell:
    "conda activate miniconda3/envs/splicemutr

    mkdir {ouput.OUT_DIR}

    {input.SCRIPT_DIR}/process_peptides.py -p {input.PEPTIDES} -o {output.OUT_DIR} -k {input.KMER_LENGTH}

    conda deactivate"

rule run_arcasHLA:
  input:
    GENOTYPES_DIR=/genotypes
    FILENAMES_FILE=/bamfiles.txt # all bamfiles for cohort listed in file
    NUM_BAM_FILES=8
  output:
  shell:
    "conda activate miniconda3/envs/arcashla
    START=1
    for VAR in {$START..{input.NUM_BAM_FILES}}
    do
      FILE=$(sed -n ${VAR}p {input.FILENAMES_FILE})
      FILE_BASE=$(basename {input.FILE})
      FILE_DIR={input.GENOTYPES_DIR}/${FILE_BASE}_dir
      mkdir $FILE_DIR

      # sort bam file
      samtools sort -o ${FILE}.sorted $FILE

      extract ${FILE} -o $FILE_DIR -v

      cd $FILE_DIR

      FASTQ1=$(ls *.extracted.1*)
      FASTQ2=$(ls *.extracted.2*)
      genotype $FASTQ1 $FASTQ2 -g A,B,C,DPA1,DPB1,DQA1,DQB1,DRA,DRB1 -o $FILE_DIR -v
    done"

rule run_MHCnuggets:
  input:
    TYPE="I"
    INPUT_KMERS=/process_peptides_out/peps_9.txt # an ouput from the previous step
    MHC_ALLELE_FILE=class1_alleles.txt
    SCRIPT_DIR=/users/tpalmer/splicemute/inst
  output:
    OUT_DIR=/mhcnuggets_out
  shell:
    "conda activate miniconda3/envs/splicemutr

    mkdir {output.OUT_DIR}

    {input.SCRIPT_DIR}/runMHCnuggets.py -t {input.TYPE} -k {input.INPUT_KMERS} -m input.{MHC_ALLELE_FILE} -o {output.OUT_DIR}

    cd {output.OUT_DIR}
    ls $PWD/*_peps_9.txt > allele_files.txt

    conda deactivate"

rule process_bindaffinity:
  input:
    ALLELE_FILES=/mhcnuggets_out/allele_files.txt
    SCRIPT_DIR=/users/tpalmer/splicemute/inst
    KMER_LENGTH=9
    PICKLE_DIR=/process_peptides_out
    NUM_ALLELE_FILES=6
  output:
    OUT_DIR=/process_bindaff_out
  shell:
    "conda activate miniconda3/envs/splicemutr

    START=1
    for VAR in {$START..{input.NUM_ALLELE_FILES}}
    do
      ALLELE=$(sed -n ${VAR}p $ALLELE_FILES)
      BINDERS=$OUT_DIR/$(echo $(basename $ALLELE) | sed 's/.txt/_filt.txt/g')
      awk -F "," '{ if ($2 <= 500) { print } }' $ALLELE > $BINDERS

      {input.SCRIPT_DIR}/process_bindaff.py -b $BINDERS -p {input.PICKLE_DIR} -o {output.OUT_DIR} -k {input.KMER_LENGTH}
    done

    conda deactivate"

rule extract_data:

  input:
    ALLELE_FILES=class_1_alleles.txt
    NUM_ALLELE_FILES=6
    SCRIPT_DIR=/splicemute/inst
    PICKLE_DIR=/process_bindaff_out
  shell:
    "conda activate miniconda3/envs/splicemutr

    START=1
    for VAR in {$START..{input.NUM_ALLELE_FILES}}
    do
      ALLELE=$(sed -n ${VAR}p {input.ALLELE_FILES})

      {input.SCRIPT_DIR}/extract_data.py -a $ALLELE -p {input.PICKLE_DIR} -b 9 -e 10

    done

    conda deactivate"

rule analyze_splicemutr(python):
  input:
    GENOTYPES=/ANALYSIS_NAME_genotypes.txt
    SUMMARY_DIR=process_bindaff_out
    SPLICE_DAT_FILE=/combine_splicemutr_out/data_splicemutr_all_pep.txt
    SUMMARY_TYPE='IC50'
    SCRIPT_DIR=/splicemute/inst
    NUM_SAMPLES=8
  output:
    OUT_DIR=/analyze_splicemutr_out
  shell:
    "conda activate miniconda3/envs/splicemutr
    START=1
    for VAR in {$START..{input.NUM_SAMPLES}}
    do
      $SCRIPT_DIR/analyze_splicemutr.py -g {input.GENOTYPES} -s {input.SUMMARY_DIR} -d {input.SPLICE_DAT_FILE} -o {output.OUT_DIR} -t {input.SUMMARY_TYPE} -n $VAR
    done

    cd {output.OUT_DIR}
    ls $PWD/*_splicemutr_kmers.txt > filenames.txt

    conda deactivate"

rule compile_kmer_counts:
  input:
    KMERS_FILES=/analyze_splicemutr_out/filenames.txt
    SCRIPT_DIR=/users/tpalmer/splicemute/inst
  output:
    OUT_DIR=/kmer_counts
  shell:

    if [[ ! -d $OUT_DIR ]]
    then
            mkdir $OUT_DIR
    fi

    {input.SCRIPT_DIR}/compile_kmer_counts.py -k {input.KMERS_FILES} -o {output.OUT_DIR}

rule create_junction_expression:
  input:
      SCRIPT_DIR=/splicemute/scripts
      JUNC_FILES=/junc_files/filenames.txt
      JUNC_DIR=/junc_files
  output:
      OUT_DIR=/create_junc_expression_out
  shell:
    "conda activate miniconda3/envs/splicemutr

    {input.SCRIPT_DIR}/create_junc_expr.R -j {input.JUNC_DIR} -f {input.JUNC_FILES} -o {output.OUT_DIR}

    conda deactivate"

rule calculate_gene_metric:
  input:
    SCRIPT_DIR=/users/tpalmer/splicemute/scripts
    SPLICE_DAT_FILE=combine_splicemutr_out_cp/data_splicemutr_all_pep.rds
    KMER_COUNTS_directory=/kmer_counts/all_kmers.rds
    JUNC_EXPR_FILE=/junc_files/junc_expr_combined_vst.rds
  output:
    OUT_PREFIX=/calc_gene_metric_out
  shell:

    "conda activate miniconda3/envs/splicemutr

    mkdir {output.OUT_PREFIX}

    {input.SCRIPT_DIR}/calc_gene_metric_len_norm.R  -s {input.SPLICE_DAT_FILE} -k {input.KMER_COUNTS} -j {input.JUNC_EXPR_FILE} -o {output.OUT_PREFIX}

    conda deactivate"





